{"name":"Di-node","tagline":"Dependency injection for node >= v4.0.0","body":"DI Node [![Build Status](https://travis-ci.org/igorzg/di-node.svg)](https://travis-ci.org/igorzg/di-node)\r\n====\r\n\r\n# Support\r\n* [Dependency injection](https://en.wikipedia.org/wiki/Dependency_injection) for nodejs >= v4.0.0\r\n* Path aliases\r\n* Dynamic module definitions\r\n* Module mocking for easier testing\r\n\r\nUsage of older version presentation on MNUG bounded to [MVCJS](https://www.youtube.com/watch?v=Jc4B39acWYc).\r\n> Example of [CMS](https://github.com/igorzg/js_cms) app on older version.\r\n\r\n# Usage\r\nDependency injection provides you ioc and great testing features.\r\nModule returns single instance of dependency injection.\r\n> While using di-node, do not load anything via require, except di-node otherwise you will not be able to mock that object or provide custom implementation of that object when it's needed.\r\n\r\n# CREATE FILE ./di.js\r\n**VERY IMPORTANT is to pass local require resolver to correctly resolve dependencies**\r\n```javascript\r\nlet DI = require('di-node');\r\nlet di = new DI(require);\r\n/// do something here\r\ndi.setAlias('mypath', __dirname + '/mypath');\r\nmodule.exports = di;\r\n```\r\n\r\n\r\n### Example module.js\r\n```javascript\r\nlet di = require('./di');\r\nlet Type = di.load('typed-js');\r\nlet fs = di.load('fs');\r\n\r\nclass D extends Type {\r\n    constructor(name) {\r\n        super(\r\n            {\r\n                name: Type.STRING\r\n            }\r\n        );\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nmodule.exports = new D('Igor');\r\n```\r\n### Test of class D \r\n```javascript\r\nit('mock', () => {\r\n    class A {\r\n        constructor(config) {\r\n            expect(config).toEqual({name: 'str'});\r\n        }\r\n    }\r\n    A.STRING = 'str';\r\n    di.setAlias('b', __dirname + '/b');\r\n    let val = di.load('@{b}/di-test');\r\n    expect(val instanceof Type).toBe(true);\r\n    let valMock = di.mock('@{b}/di-test', {\r\n        'typed-js': A\r\n    });\r\n    expect(valMock instanceof A).toBe(true);\r\n});\r\n```\r\n\r\n# DI Methods\r\n\r\n## di.load(key)\r\nWhile using di-node do not load anything via require except di-node otherwise you will not be able to mock that object\r\nor provide custom implementation of that object when it's needed.\r\n\r\n### di.load Valid\r\n```javascript\r\n'use strict';\r\n\r\nlet di = require('./di');\r\nlet Type = di.load('typed-js');\r\nlet fs = di.load('fs');\r\n\r\nclass D extends Type {\r\n    constructor(name) {\r\n        super(\r\n            {\r\n                name: Type.STRING\r\n            }\r\n        );\r\n        this.name = name;\r\n    }\r\n}\r\n```\r\n\r\n### di.load Invalid\r\nBecause you will not be able to mock fs when it's needed\r\n```javascript\r\n'use strict';\r\n\r\nlet di = require('./di');\r\nlet Type = di.load('typed-js');\r\nlet fs = require('fs');\r\n\r\nclass D extends Type {\r\n    constructor(name) {\r\n        super(\r\n            {\r\n                name: Type.STRING\r\n            }\r\n        );\r\n        this.name = name;\r\n    }\r\n}\r\n```\r\n\r\n## di.mock(module, modules)\r\nMock is used for testing purposes\r\n{string} module\r\n{Object} definition of modules\r\n```javascript\r\nit('mock', () => {\r\n    class A {\r\n        constructor(config) {\r\n            expect(config).toEqual({name: 'str'});\r\n        }\r\n    }\r\n    A.STRING = 'str';\r\n    di.setAlias('b', __dirname + '/b');\r\n    let val = di.load('@{b}/di-test');\r\n    expect(val instanceof Type).toBe(true);\r\n    let valMock = di.mock('@{b}/di-test', {\r\n        'typed-js': A\r\n    });\r\n    expect(valMock instanceof A).toBe(true);\r\n});\r\n```\r\n\r\n\r\n## di.setAlias(key, value)\r\nSets specific path alias which can be used in load method\r\n{string} key\r\n{string} value\r\n```javascript\r\n// set aliases\r\ndi.setAlias('app', __dirname + '/app');\r\ndi.setAlias('components', '@{app}/components');\r\n// usage\r\ndi.load('@{app}/module');\r\ndi.load('@{components}/redis');\r\n```\r\n## di.getAlias(key)\r\nGet specific alias\r\n{string} key\r\nreturn {string}\r\n```javascript\r\ndi.setAlias('app', __dirname + '/app');\r\ndi.getAlias('app'); // returns __dirname/app\r\n```\r\n## di.hasAlias(key)\r\nCheck if alias is setted\r\nreturn {boolean}\r\n```javascript\r\ndi.setAlias('app', __dirname + '/app');\r\ndi.hasAlias('app'); // true\r\n```\r\n## di.normalize(key)\r\nNormalize path\r\nreturn {string}\r\n```javascript\r\ndi.setAlias('app', '/app');\r\ndi.setAlias('components', '@{app}/components');\r\ndi.normalize('@{components}/path'); //  returns /app/components/path\r\n```\r\n\r\n\r\n## di.setModule(key, value)\r\nSet specific module\r\n{string} key\r\n{Object|Any} value\r\n```javascript\r\n// My fs implementation\r\ndi.setModule('fs', {\r\n    readFileSync: {\r\n    \r\n    }\r\n});\r\ndi.setModule('app/info', '@{app}/core/info');\r\n// usage\r\ndi.load('fs'); // will load custom implementation\r\ndi.load('app/info'); // will load appPath/core/info.js\r\n```\r\n\r\n## di.getModule(key)\r\nGet specific module\r\n{string} key\r\nreturn {Object|Any} value\r\n```javascript\r\ndi.setModule('fs', {\r\n    readFileSync: {\r\n    \r\n    }\r\n});\r\ndi.getModule('fs'); // returns custom fs module\r\n```\r\n### di.hasModule(key)\r\nCheck if module is registered in di \r\nreturn {boolean}\r\n```javascript\r\ndi.setModule('custom', {\r\n    readFileSync: {\r\n    \r\n    }\r\n});\r\ndi.hasModule('custom'); // true\r\n```\r\n\r\n\r\n\r\n\r\n","google":"UA-38394375-1","note":"Don't delete this file! It's used internally to help with page regeneration."}